name: Deploy Functions

on:
  push:
    branches: [main]
    paths: ["functions/**"]
  pull_request:
    branches: [main]
    paths: ["functions/**"]
  workflow_dispatch:

jobs:
  sonarcloud_analysis_orchestrator:
    name: SonarCloud Analysis - Orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: SonarCloud Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin /k:"renatocb_photo-upload-functions" /o:"renatocb" /d:sonar.token="$SONAR_TOKEN" /v:"1.0.0" /d:sonar.sources="functions/" /d:sonar.exclusions="../backend/**,../frontend/**,**/backend/**,**/frontend/**"
      - name: Build Orchestrator Only
        run: dotnet build functions/ImageOrchestrator/ImageOrchestrator.csproj --no-incremental
      - name: Run Tests Orchestrator Only
        run: dotnet test functions/ImageOrchestrator/ImageOrchestrator.csproj --no-build --verbosity normal
      - name: SonarCloud End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  sonarcloud_analysis_workers:
    name: SonarCloud Analysis - Workers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: SonarCloud Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin /k:"renatocb_photo-upload-functions" /o:"renatocb" /d:sonar.token="$SONAR_TOKEN" /v:"1.0.0" /d:sonar.sources="functions/" /d:sonar.exclusions="../backend/**,../frontend/**,**/backend/**,**/frontend/**"
      - name: Build Workers Only
        run: dotnet build functions/ImageWorkers/ImageWorkers.csproj --no-incremental
      - name: Run Tests Workers Only
        run: dotnet test functions/ImageWorkers/ImageWorkers.csproj --no-build --verbosity normal
      - name: SonarCloud End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  deploy_functions:
    name: Deploy Functions
    needs: [sonarcloud_analysis_orchestrator, sonarcloud_analysis_workers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
      - name: Build Functions
        run: |
          cd functions/ImageOrchestrator
          dotnet publish -c Release -o ./publish
          cd ../ImageWorkers
          dotnet publish -c Release -o ./publish
      - name: Deploy ImageOrchestrator with retry
        run: |
          cd functions/ImageOrchestrator/publish
          zip -r ../../orchestrator-deploy.zip .
          az functionapp deployment source config-zip --resource-group photo-upload-rg --name photo-orchestrator --src ../../orchestrator-deploy.zip --timeout 300
      - name: Wait between deploys
        run: sleep 30
      - name: Deploy ImageWorkers with retry
        run: |
          cd functions/ImageWorkers/publish
          zip -r ../../workers-deploy.zip .
          az functionapp deployment source config-zip --resource-group photo-upload-rg --name photo-workers --src ../../workers-deploy.zip --timeout 300
